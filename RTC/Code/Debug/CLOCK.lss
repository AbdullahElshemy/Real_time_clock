
CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002bd4  00002c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800168  00800168  00002d70  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c90  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000af0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ed       	ldi	r30, 0xD4	; 212
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 08 14 	call	0x2810	; 0x2810 <main>
      8a:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <clock_write>:
#include "clock.h"
#include "LCD.h"
#define F_CPU 1000000UL
#include <avr/delay.h>

void clock_write(BYTE hr, BYTE min, BYTE sec){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	a5 97       	sbiw	r28, 0x25	; 37
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8b a3       	std	Y+35, r24	; 0x23
     f00:	6c a3       	std	Y+36, r22	; 0x24
     f02:	4d a3       	std	Y+37, r20	; 0x25
	BYTE hr0,hr1,min0,min1,sec0,sec1;

	hr1 = hr%10;
     f04:	8b a1       	ldd	r24, Y+35	; 0x23
     f06:	9a e0       	ldi	r25, 0x0A	; 10
     f08:	69 2f       	mov	r22, r25
     f0a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodqi4>
     f0e:	89 2f       	mov	r24, r25
     f10:	89 a3       	std	Y+33, r24	; 0x21
	hr0 = hr/10.0;
     f12:	8b a1       	ldd	r24, Y+35	; 0x23
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	aa 27       	eor	r26, r26
     f1a:	97 fd       	sbrc	r25, 7
     f1c:	a0 95       	com	r26
     f1e:	ba 2f       	mov	r27, r26
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8a a3       	std	Y+34, r24	; 0x22

	min1 = min%10;
     f4e:	8c a1       	ldd	r24, Y+36	; 0x24
     f50:	9a e0       	ldi	r25, 0x0A	; 10
     f52:	69 2f       	mov	r22, r25
     f54:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodqi4>
     f58:	89 2f       	mov	r24, r25
     f5a:	8f 8f       	std	Y+31, r24	; 0x1f
	min0 = min/10.0;
     f5c:	8c a1       	ldd	r24, Y+36	; 0x24
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	aa 27       	eor	r26, r26
     f64:	97 fd       	sbrc	r25, 7
     f66:	a0 95       	com	r26
     f68:	ba 2f       	mov	r27, r26
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	88 a3       	std	Y+32, r24	; 0x20

	sec1 = sec%10;
     f98:	8d a1       	ldd	r24, Y+37	; 0x25
     f9a:	9a e0       	ldi	r25, 0x0A	; 10
     f9c:	69 2f       	mov	r22, r25
     f9e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodqi4>
     fa2:	89 2f       	mov	r24, r25
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	sec0 = sec/10.0;
     fa6:	8d a1       	ldd	r24, Y+37	; 0x25
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	aa 27       	eor	r26, r26
     fae:	97 fd       	sbrc	r25, 7
     fb0:	a0 95       	com	r26
     fb2:	ba 2f       	mov	r27, r26
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e2       	ldi	r20, 0x20	; 32
     fca:	51 e4       	ldi	r21, 0x41	; 65
     fcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	8e 8f       	std	Y+30, r24	; 0x1e

	hr0+=48;
     fe2:	8a a1       	ldd	r24, Y+34	; 0x22
     fe4:	80 5d       	subi	r24, 0xD0	; 208
     fe6:	8a a3       	std	Y+34, r24	; 0x22
	hr1+=48;
     fe8:	89 a1       	ldd	r24, Y+33	; 0x21
     fea:	80 5d       	subi	r24, 0xD0	; 208
     fec:	89 a3       	std	Y+33, r24	; 0x21
	min0+=48;
     fee:	88 a1       	ldd	r24, Y+32	; 0x20
     ff0:	80 5d       	subi	r24, 0xD0	; 208
     ff2:	88 a3       	std	Y+32, r24	; 0x20
	min1+=48;
     ff4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff6:	80 5d       	subi	r24, 0xD0	; 208
     ff8:	8f 8f       	std	Y+31, r24	; 0x1f
	sec0+=48;
     ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffc:	80 5d       	subi	r24, 0xD0	; 208
     ffe:	8e 8f       	std	Y+30, r24	; 0x1e
	sec1+=48;
    1000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1002:	80 5d       	subi	r24, 0xD0	; 208
    1004:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_startfrom(1,1);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 92 12 	call	0x2524	; 0x2524 <LCD_startfrom>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e4       	ldi	r26, 0x40	; 64
    1014:	b0 e4       	ldi	r27, 0x40	; 64
    1016:	89 8f       	std	Y+25, r24	; 0x19
    1018:	9a 8f       	std	Y+26, r25	; 0x1a
    101a:	ab 8f       	std	Y+27, r26	; 0x1b
    101c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	69 8d       	ldd	r22, Y+25	; 0x19
    1020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a e7       	ldi	r20, 0x7A	; 122
    102c:	53 e4       	ldi	r21, 0x43	; 67
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8d 8b       	std	Y+21, r24	; 0x15
    1038:	9e 8b       	std	Y+22, r25	; 0x16
    103a:	af 8b       	std	Y+23, r26	; 0x17
    103c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <clock_write+0x176>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 8b       	std	Y+20, r25	; 0x14
    105c:	8b 8b       	std	Y+19, r24	; 0x13
    105e:	3f c0       	rjmp	.+126    	; 0x10de <clock_write+0x1f4>
	else if (__tmp > 65535)
    1060:	6d 89       	ldd	r22, Y+21	; 0x15
    1062:	7e 89       	ldd	r23, Y+22	; 0x16
    1064:	8f 89       	ldd	r24, Y+23	; 0x17
    1066:	98 8d       	ldd	r25, Y+24	; 0x18
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <clock_write+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	69 8d       	ldd	r22, Y+25	; 0x19
    107a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <clock_write+0x1d6>
    10a2:	89 e1       	ldi	r24, 0x19	; 25
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9a 8b       	std	Y+18, r25	; 0x12
    10a8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10aa:	89 89       	ldd	r24, Y+17	; 0x11
    10ac:	9a 89       	ldd	r25, Y+18	; 0x12
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <clock_write+0x1c4>
    10b2:	9a 8b       	std	Y+18, r25	; 0x12
    10b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	8b 89       	ldd	r24, Y+19	; 0x13
    10b8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9c 8b       	std	Y+20, r25	; 0x14
    10be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	8b 89       	ldd	r24, Y+19	; 0x13
    10c2:	9c 89       	ldd	r25, Y+20	; 0x14
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <clock_write+0x1b8>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <clock_write+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6d 89       	ldd	r22, Y+21	; 0x15
    10cc:	7e 89       	ldd	r23, Y+22	; 0x16
    10ce:	8f 89       	ldd	r24, Y+23	; 0x17
    10d0:	98 8d       	ldd	r25, Y+24	; 0x18
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9c 8b       	std	Y+20, r25	; 0x14
    10dc:	8b 8b       	std	Y+19, r24	; 0x13
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	98 8b       	std	Y+16, r25	; 0x10
    10e4:	8f 87       	std	Y+15, r24	; 0x0f
    10e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e8:	98 89       	ldd	r25, Y+16	; 0x10
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <clock_write+0x200>
    10ee:	98 8b       	std	Y+16, r25	; 0x10
    10f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_write_char(hr0);
    10f2:	8a a1       	ldd	r24, Y+34	; 0x22
    10f4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(hr1);
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(':');
    10fe:	8a e3       	ldi	r24, 0x3A	; 58
    1100:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(min0);
    1104:	88 a1       	ldd	r24, Y+32	; 0x20
    1106:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(min1);
    110a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    110c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(':');
    1110:	8a e3       	ldi	r24, 0x3A	; 58
    1112:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(sec0);
    1116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1118:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(sec1);
    111c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e4       	ldi	r27, 0x40	; 64
    112a:	8b 87       	std	Y+11, r24	; 0x0b
    112c:	9c 87       	std	Y+12, r25	; 0x0c
    112e:	ad 87       	std	Y+13, r26	; 0x0d
    1130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1132:	6b 85       	ldd	r22, Y+11	; 0x0b
    1134:	7c 85       	ldd	r23, Y+12	; 0x0c
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	9e 85       	ldd	r25, Y+14	; 0x0e
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	4a e7       	ldi	r20, 0x7A	; 122
    1140:	53 e4       	ldi	r21, 0x43	; 67
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	8f 83       	std	Y+7, r24	; 0x07
    114c:	98 87       	std	Y+8, r25	; 0x08
    114e:	a9 87       	std	Y+9, r26	; 0x09
    1150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	2c f4       	brge	.+10     	; 0x1174 <clock_write+0x28a>
		__ticks = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <clock_write+0x308>
	else if (__tmp > 65535)
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	57 e4       	ldi	r21, 0x47	; 71
    1184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1188:	18 16       	cp	r1, r24
    118a:	4c f5       	brge	.+82     	; 0x11de <clock_write+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	51 e4       	ldi	r21, 0x41	; 65
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	0f c0       	rjmp	.+30     	; 0x11d4 <clock_write+0x2ea>
    11b6:	89 e1       	ldi	r24, 0x19	; 25
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <clock_write+0x2d8>
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	69 f7       	brne	.-38     	; 0x11b6 <clock_write+0x2cc>
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <clock_write+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11de:	6f 81       	ldd	r22, Y+7	; 0x07
    11e0:	78 85       	ldd	r23, Y+8	; 0x08
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <clock_write+0x314>
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1206:	a5 96       	adiw	r28, 0x25	; 37
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <date_write>:

void date_write(BYTE day , BYTE month , unsigned int year){
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	6a 97       	sbiw	r28, 0x1a	; 26
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	8f 8b       	std	Y+23, r24	; 0x17
    122e:	68 8f       	std	Y+24, r22	; 0x18
    1230:	5a 8f       	std	Y+26, r21	; 0x1a
    1232:	49 8f       	std	Y+25, r20	; 0x19
	BYTE day0,day1,month0,month1,year0,year1,year2,year3;

	day1 = day%10;
    1234:	8f 89       	ldd	r24, Y+23	; 0x17
    1236:	9a e0       	ldi	r25, 0x0A	; 10
    1238:	69 2f       	mov	r22, r25
    123a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodqi4>
    123e:	89 2f       	mov	r24, r25
    1240:	8d 8b       	std	Y+21, r24	; 0x15
	day0 = day/10.0;
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	aa 27       	eor	r26, r26
    124a:	97 fd       	sbrc	r25, 7
    124c:	a0 95       	com	r26
    124e:	ba 2f       	mov	r27, r26
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e2       	ldi	r20, 0x20	; 32
    1266:	51 e4       	ldi	r21, 0x41	; 65
    1268:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	8e 8b       	std	Y+22, r24	; 0x16

	month1 = month%10;
    127e:	88 8d       	ldd	r24, Y+24	; 0x18
    1280:	9a e0       	ldi	r25, 0x0A	; 10
    1282:	69 2f       	mov	r22, r25
    1284:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodqi4>
    1288:	89 2f       	mov	r24, r25
    128a:	8b 8b       	std	Y+19, r24	; 0x13
	month0 = month/10.0;
    128c:	88 8d       	ldd	r24, Y+24	; 0x18
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	aa 27       	eor	r26, r26
    1294:	97 fd       	sbrc	r25, 7
    1296:	a0 95       	com	r26
    1298:	ba 2f       	mov	r27, r26
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8c 8b       	std	Y+20, r24	; 0x14

	year0 = year / 1000.0;
    12c8:	89 8d       	ldd	r24, Y+25	; 0x19
    12ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12cc:	cc 01       	movw	r24, r24
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	4a e7       	ldi	r20, 0x7A	; 122
    12e8:	54 e4       	ldi	r21, 0x44	; 68
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8a 8b       	std	Y+18, r24	; 0x12
	year1 = (year%1000) / 100.0;
    1300:	89 8d       	ldd	r24, Y+25	; 0x19
    1302:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1304:	28 ee       	ldi	r18, 0xE8	; 232
    1306:	33 e0       	ldi	r19, 0x03	; 3
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__udivmodhi4>
    130e:	cc 01       	movw	r24, r24
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	48 ec       	ldi	r20, 0xC8	; 200
    132a:	52 e4       	ldi	r21, 0x42	; 66
    132c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	89 8b       	std	Y+17, r24	; 0x11
	year2 = (year%100) / 10;
    1342:	89 8d       	ldd	r24, Y+25	; 0x19
    1344:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1346:	24 e6       	ldi	r18, 0x64	; 100
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	b9 01       	movw	r22, r18
    134c:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__udivmodhi4>
    1350:	2a e0       	ldi	r18, 0x0A	; 10
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__udivmodhi4>
    135a:	cb 01       	movw	r24, r22
    135c:	88 8b       	std	Y+16, r24	; 0x10
	year3 = year%10;
    135e:	89 8d       	ldd	r24, Y+25	; 0x19
    1360:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	b9 01       	movw	r22, r18
    1368:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__udivmodhi4>
    136c:	8f 87       	std	Y+15, r24	; 0x0f

	day0+=48;
    136e:	8e 89       	ldd	r24, Y+22	; 0x16
    1370:	80 5d       	subi	r24, 0xD0	; 208
    1372:	8e 8b       	std	Y+22, r24	; 0x16
	day1+=48;
    1374:	8d 89       	ldd	r24, Y+21	; 0x15
    1376:	80 5d       	subi	r24, 0xD0	; 208
    1378:	8d 8b       	std	Y+21, r24	; 0x15
	month0+=48;
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	80 5d       	subi	r24, 0xD0	; 208
    137e:	8c 8b       	std	Y+20, r24	; 0x14
	month1+=48;
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	80 5d       	subi	r24, 0xD0	; 208
    1384:	8b 8b       	std	Y+19, r24	; 0x13
	year0+=48;
    1386:	8a 89       	ldd	r24, Y+18	; 0x12
    1388:	80 5d       	subi	r24, 0xD0	; 208
    138a:	8a 8b       	std	Y+18, r24	; 0x12
	year1+=48;
    138c:	89 89       	ldd	r24, Y+17	; 0x11
    138e:	80 5d       	subi	r24, 0xD0	; 208
    1390:	89 8b       	std	Y+17, r24	; 0x11
	year2+=48;
    1392:	88 89       	ldd	r24, Y+16	; 0x10
    1394:	80 5d       	subi	r24, 0xD0	; 208
    1396:	88 8b       	std	Y+16, r24	; 0x10
	year3+=48;
    1398:	8f 85       	ldd	r24, Y+15	; 0x0f
    139a:	80 5d       	subi	r24, 0xD0	; 208
    139c:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_startfrom(2,1);
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	0e 94 92 12 	call	0x2524	; 0x2524 <LCD_startfrom>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e4       	ldi	r26, 0x40	; 64
    13ac:	b0 e4       	ldi	r27, 0x40	; 64
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a e7       	ldi	r20, 0x7A	; 122
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8f 83       	std	Y+7, r24	; 0x07
    13d0:	98 87       	std	Y+8, r25	; 0x08
    13d2:	a9 87       	std	Y+9, r26	; 0x09
    13d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <date_write+0x1e0>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <date_write+0x25e>
	else if (__tmp > 65535)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <date_write+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <date_write+0x240>
    143a:	89 e1       	ldi	r24, 0x19	; 25
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <date_write+0x22e>
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <date_write+0x222>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <date_write+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <date_write+0x26a>
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_write_char(day0);
    148a:	8e 89       	ldd	r24, Y+22	; 0x16
    148c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(day1);
    1490:	8d 89       	ldd	r24, Y+21	; 0x15
    1492:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char('/');
    1496:	8f e2       	ldi	r24, 0x2F	; 47
    1498:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(month0);
    149c:	8c 89       	ldd	r24, Y+20	; 0x14
    149e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(month1);
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char('/');
    14a8:	8f e2       	ldi	r24, 0x2F	; 47
    14aa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(year0);
    14ae:	8a 89       	ldd	r24, Y+18	; 0x12
    14b0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(year1);
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(year2);
    14ba:	88 89       	ldd	r24, Y+16	; 0x10
    14bc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
	LCD_write_char(year3);
    14c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
}
    14c6:	6a 96       	adiw	r28, 0x1a	; 26
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <pin_mode>:
#define HIGH 1
#define LOW 0


void pin_mode (char port , BYTE pin , BYTE mode)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <pin_mode+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <pin_mode+0x8>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
    14ea:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	82 34       	cpi	r24, 0x42	; 66
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <pin_mode+0x2a>
    1500:	48 c0       	rjmp	.+144    	; 0x1592 <pin_mode+0xba>
    1502:	2c 81       	ldd	r18, Y+4	; 0x04
    1504:	3d 81       	ldd	r19, Y+5	; 0x05
    1506:	23 34       	cpi	r18, 0x43	; 67
    1508:	31 05       	cpc	r19, r1
    150a:	34 f4       	brge	.+12     	; 0x1518 <pin_mode+0x40>
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 34       	cpi	r24, 0x41	; 65
    1512:	91 05       	cpc	r25, r1
    1514:	71 f0       	breq	.+28     	; 0x1532 <pin_mode+0x5a>
    1516:	cb c0       	rjmp	.+406    	; 0x16ae <pin_mode+0x1d6>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	23 34       	cpi	r18, 0x43	; 67
    151e:	31 05       	cpc	r19, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <pin_mode+0x4c>
    1522:	67 c0       	rjmp	.+206    	; 0x15f2 <pin_mode+0x11a>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	84 34       	cpi	r24, 0x44	; 68
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <pin_mode+0x58>
    152e:	91 c0       	rjmp	.+290    	; 0x1652 <pin_mode+0x17a>
    1530:	be c0       	rjmp	.+380    	; 0x16ae <pin_mode+0x1d6>
	{
		case 'A':
		{
			if (mode == OUTPUT) DDRA |= (1<<pin);
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	a1 f4       	brne	.+40     	; 0x1560 <pin_mode+0x88>
    1538:	aa e3       	ldi	r26, 0x3A	; 58
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e3       	ldi	r30, 0x3A	; 58
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <pin_mode+0x7e>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <pin_mode+0x7a>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	a7 c0       	rjmp	.+334    	; 0x16ae <pin_mode+0x1d6>
			else if (mode == INPUT) DDRA &= ~(1<<pin);
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 23       	and	r24, r24
    1564:	09 f0       	breq	.+2      	; 0x1568 <pin_mode+0x90>
    1566:	a3 c0       	rjmp	.+326    	; 0x16ae <pin_mode+0x1d6>
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <pin_mode+0xae>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <pin_mode+0xaa>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	8e c0       	rjmp	.+284    	; 0x16ae <pin_mode+0x1d6>
			break;
		}
		case 'B':
		{
			if (mode == OUTPUT) DDRB |= (1<<pin);
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <pin_mode+0xe8>
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <pin_mode+0xde>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <pin_mode+0xda>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	77 c0       	rjmp	.+238    	; 0x16ae <pin_mode+0x1d6>
			else if (mode == INPUT) DDRB &= ~(1<<pin);
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	88 23       	and	r24, r24
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <pin_mode+0xf0>
    15c6:	73 c0       	rjmp	.+230    	; 0x16ae <pin_mode+0x1d6>
    15c8:	a7 e3       	ldi	r26, 0x37	; 55
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e7 e3       	ldi	r30, 0x37	; 55
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <pin_mode+0x10e>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <pin_mode+0x10a>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	5e c0       	rjmp	.+188    	; 0x16ae <pin_mode+0x1d6>
			break;
		}
		case 'C':
		{
			if (mode == OUTPUT) DDRC |= (1<<pin);
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	a1 f4       	brne	.+40     	; 0x1620 <pin_mode+0x148>
    15f8:	a4 e3       	ldi	r26, 0x34	; 52
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e4 e3       	ldi	r30, 0x34	; 52
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <pin_mode+0x13e>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <pin_mode+0x13a>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	47 c0       	rjmp	.+142    	; 0x16ae <pin_mode+0x1d6>
			else if (mode == INPUT) DDRC &= ~(1<<pin);
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	09 f0       	breq	.+2      	; 0x1628 <pin_mode+0x150>
    1626:	43 c0       	rjmp	.+134    	; 0x16ae <pin_mode+0x1d6>
    1628:	a4 e3       	ldi	r26, 0x34	; 52
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e4 e3       	ldi	r30, 0x34	; 52
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <pin_mode+0x16e>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <pin_mode+0x16a>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	2e c0       	rjmp	.+92     	; 0x16ae <pin_mode+0x1d6>
			break;
		}
		case 'D':
		{
			if (mode == OUTPUT) DDRD |= (1<<pin);
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	a1 f4       	brne	.+40     	; 0x1680 <pin_mode+0x1a8>
    1658:	a1 e3       	ldi	r26, 0x31	; 49
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e1 e3       	ldi	r30, 0x31	; 49
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <pin_mode+0x19e>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <pin_mode+0x19a>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	17 c0       	rjmp	.+46     	; 0x16ae <pin_mode+0x1d6>
			else if (mode == INPUT) DDRD &= ~(1<<pin);
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 23       	and	r24, r24
    1684:	a1 f4       	brne	.+40     	; 0x16ae <pin_mode+0x1d6>
    1686:	a1 e3       	ldi	r26, 0x31	; 49
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e1 e3       	ldi	r30, 0x31	; 49
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <pin_mode+0x1cc>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <pin_mode+0x1c8>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
		default:
		{
			break;
		}
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <pin_write>:

void pin_write (char port , BYTE pin ,BYTE value)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <pin_write+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <pin_write+0x8>
    16c6:	0f 92       	push	r0
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	6a 83       	std	Y+2, r22	; 0x02
    16d0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3d 83       	std	Y+5, r19	; 0x05
    16da:	2c 83       	std	Y+4, r18	; 0x04
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	9d 81       	ldd	r25, Y+5	; 0x05
    16e0:	82 34       	cpi	r24, 0x42	; 66
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <pin_write+0x2a>
    16e6:	48 c0       	rjmp	.+144    	; 0x1778 <pin_write+0xba>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	23 34       	cpi	r18, 0x43	; 67
    16ee:	31 05       	cpc	r19, r1
    16f0:	34 f4       	brge	.+12     	; 0x16fe <pin_write+0x40>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	81 34       	cpi	r24, 0x41	; 65
    16f8:	91 05       	cpc	r25, r1
    16fa:	71 f0       	breq	.+28     	; 0x1718 <pin_write+0x5a>
    16fc:	cb c0       	rjmp	.+406    	; 0x1894 <pin_write+0x1d6>
    16fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1700:	3d 81       	ldd	r19, Y+5	; 0x05
    1702:	23 34       	cpi	r18, 0x43	; 67
    1704:	31 05       	cpc	r19, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <pin_write+0x4c>
    1708:	67 c0       	rjmp	.+206    	; 0x17d8 <pin_write+0x11a>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	84 34       	cpi	r24, 0x44	; 68
    1710:	91 05       	cpc	r25, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <pin_write+0x58>
    1714:	91 c0       	rjmp	.+290    	; 0x1838 <pin_write+0x17a>
    1716:	be c0       	rjmp	.+380    	; 0x1894 <pin_write+0x1d6>
	{
		case 'A':
		{
			if(value == HIGH) PORTA |= (1<<pin);
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	a1 f4       	brne	.+40     	; 0x1746 <pin_write+0x88>
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <pin_write+0x7e>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <pin_write+0x7a>
    1740:	84 2b       	or	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	a7 c0       	rjmp	.+334    	; 0x1894 <pin_write+0x1d6>
			else if (value == LOW) PORTA &= ~(1<<pin);
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 23       	and	r24, r24
    174a:	09 f0       	breq	.+2      	; 0x174e <pin_write+0x90>
    174c:	a3 c0       	rjmp	.+326    	; 0x1894 <pin_write+0x1d6>
    174e:	ab e3       	ldi	r26, 0x3B	; 59
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e3       	ldi	r30, 0x3B	; 59
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <pin_write+0xae>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <pin_write+0xaa>
    1770:	80 95       	com	r24
    1772:	84 23       	and	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	8e c0       	rjmp	.+284    	; 0x1894 <pin_write+0x1d6>
			break;
		}
		case 'B':
		{
			if(value == HIGH) PORTB |= (1<<pin);
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	a1 f4       	brne	.+40     	; 0x17a6 <pin_write+0xe8>
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <pin_write+0xde>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <pin_write+0xda>
    17a0:	84 2b       	or	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	77 c0       	rjmp	.+238    	; 0x1894 <pin_write+0x1d6>
			else if (value == LOW) PORTB &= ~(1<<pin);
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	88 23       	and	r24, r24
    17aa:	09 f0       	breq	.+2      	; 0x17ae <pin_write+0xf0>
    17ac:	73 c0       	rjmp	.+230    	; 0x1894 <pin_write+0x1d6>
    17ae:	a8 e3       	ldi	r26, 0x38	; 56
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e3       	ldi	r30, 0x38	; 56
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <pin_write+0x10e>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <pin_write+0x10a>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	5e c0       	rjmp	.+188    	; 0x1894 <pin_write+0x1d6>
			break;
		}
		case 'C':
		{
			if(value == HIGH) PORTC |= (1<<pin);
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	a1 f4       	brne	.+40     	; 0x1806 <pin_write+0x148>
    17de:	a5 e3       	ldi	r26, 0x35	; 53
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 e3       	ldi	r30, 0x35	; 53
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <pin_write+0x13e>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <pin_write+0x13a>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	47 c0       	rjmp	.+142    	; 0x1894 <pin_write+0x1d6>
			else if (value == LOW) PORTC &= ~(1<<pin);
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 23       	and	r24, r24
    180a:	09 f0       	breq	.+2      	; 0x180e <pin_write+0x150>
    180c:	43 c0       	rjmp	.+134    	; 0x1894 <pin_write+0x1d6>
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <pin_write+0x16e>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <pin_write+0x16a>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	2e c0       	rjmp	.+92     	; 0x1894 <pin_write+0x1d6>
			break;
		}
		case 'D':
		{
			if(value == HIGH) PORTD |= (1<<pin);
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	a1 f4       	brne	.+40     	; 0x1866 <pin_write+0x1a8>
    183e:	a2 e3       	ldi	r26, 0x32	; 50
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e2 e3       	ldi	r30, 0x32	; 50
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <pin_write+0x19e>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <pin_write+0x19a>
    1860:	84 2b       	or	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	17 c0       	rjmp	.+46     	; 0x1894 <pin_write+0x1d6>
			else if (value == LOW) PORTD &= ~(1<<pin);
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 23       	and	r24, r24
    186a:	a1 f4       	brne	.+40     	; 0x1894 <pin_write+0x1d6>
    186c:	a2 e3       	ldi	r26, 0x32	; 50
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e2 e3       	ldi	r30, 0x32	; 50
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <pin_write+0x1cc>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <pin_write+0x1c8>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
		}
		default:{
			break;
		}
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <port_write>:

void port_write (char port , BYTE value){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <port_write+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <port_write+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port){
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	82 34       	cpi	r24, 0x42	; 66
    18c4:	91 05       	cpc	r25, r1
    18c6:	d1 f0       	breq	.+52     	; 0x18fc <port_write+0x58>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	23 34       	cpi	r18, 0x43	; 67
    18ce:	31 05       	cpc	r19, r1
    18d0:	34 f4       	brge	.+12     	; 0x18de <port_write+0x3a>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	81 34       	cpi	r24, 0x41	; 65
    18d8:	91 05       	cpc	r25, r1
    18da:	61 f0       	breq	.+24     	; 0x18f4 <port_write+0x50>
    18dc:	1b c0       	rjmp	.+54     	; 0x1914 <port_write+0x70>
    18de:	2b 81       	ldd	r18, Y+3	; 0x03
    18e0:	3c 81       	ldd	r19, Y+4	; 0x04
    18e2:	23 34       	cpi	r18, 0x43	; 67
    18e4:	31 05       	cpc	r19, r1
    18e6:	71 f0       	breq	.+28     	; 0x1904 <port_write+0x60>
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	84 34       	cpi	r24, 0x44	; 68
    18ee:	91 05       	cpc	r25, r1
    18f0:	69 f0       	breq	.+26     	; 0x190c <port_write+0x68>
    18f2:	10 c0       	rjmp	.+32     	; 0x1914 <port_write+0x70>
		case 'A': PORTA = value;
    18f4:	eb e3       	ldi	r30, 0x3B	; 59
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
		case 'B': PORTB = value;
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
		case 'C': PORTC = value;
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
		case 'D': PORTD = value;
    190c:	e2 e3       	ldi	r30, 0x32	; 50
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
	}
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <pin_read>:

BYTE pin_read (char port , BYTE pin){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	27 97       	sbiw	r28, 0x07	; 7
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	6b 83       	std	Y+3, r22	; 0x03
	BYTE val;
	switch(port){
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3e 83       	std	Y+6, r19	; 0x06
    1942:	2d 83       	std	Y+5, r18	; 0x05
    1944:	4d 81       	ldd	r20, Y+5	; 0x05
    1946:	5e 81       	ldd	r21, Y+6	; 0x06
    1948:	42 34       	cpi	r20, 0x42	; 66
    194a:	51 05       	cpc	r21, r1
    194c:	d9 f1       	breq	.+118    	; 0x19c4 <pin_read+0xa2>
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	83 34       	cpi	r24, 0x43	; 67
    1954:	91 05       	cpc	r25, r1
    1956:	34 f4       	brge	.+12     	; 0x1964 <pin_read+0x42>
    1958:	2d 81       	ldd	r18, Y+5	; 0x05
    195a:	3e 81       	ldd	r19, Y+6	; 0x06
    195c:	21 34       	cpi	r18, 0x41	; 65
    195e:	31 05       	cpc	r19, r1
    1960:	71 f0       	breq	.+28     	; 0x197e <pin_read+0x5c>
    1962:	99 c0       	rjmp	.+306    	; 0x1a96 <pin_read+0x174>
    1964:	4d 81       	ldd	r20, Y+5	; 0x05
    1966:	5e 81       	ldd	r21, Y+6	; 0x06
    1968:	43 34       	cpi	r20, 0x43	; 67
    196a:	51 05       	cpc	r21, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <pin_read+0x4e>
    196e:	4d c0       	rjmp	.+154    	; 0x1a0a <pin_read+0xe8>
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	84 34       	cpi	r24, 0x44	; 68
    1976:	91 05       	cpc	r25, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <pin_read+0x5a>
    197a:	6a c0       	rjmp	.+212    	; 0x1a50 <pin_read+0x12e>
    197c:	8c c0       	rjmp	.+280    	; 0x1a96 <pin_read+0x174>
		case 'A' : {
			val = PINA;
    197e:	e9 e3       	ldi	r30, 0x39	; 57
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
			val &= (1<<pin);
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <pin_read+0x74>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	2a 95       	dec	r18
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <pin_read+0x70>
    199a:	98 2f       	mov	r25, r24
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	89 23       	and	r24, r25
    19a0:	89 83       	std	Y+1, r24	; 0x01
			val = (val>>pin);
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a9 01       	movw	r20, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <pin_read+0x94>
    19b2:	55 95       	asr	r21
    19b4:	47 95       	ror	r20
    19b6:	8a 95       	dec	r24
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <pin_read+0x90>
    19ba:	ca 01       	movw	r24, r20
    19bc:	89 83       	std	Y+1, r24	; 0x01
			return val;
    19be:	59 81       	ldd	r21, Y+1	; 0x01
    19c0:	5c 83       	std	Y+4, r21	; 0x04
    19c2:	6a c0       	rjmp	.+212    	; 0x1a98 <pin_read+0x176>
		}
		case 'B' : {
			val = PINB;
    19c4:	e6 e3       	ldi	r30, 0x36	; 54
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	89 83       	std	Y+1, r24	; 0x01
			val &= (1<<pin);
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <pin_read+0xba>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	2a 95       	dec	r18
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <pin_read+0xb6>
    19e0:	98 2f       	mov	r25, r24
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	89 23       	and	r24, r25
    19e6:	89 83       	std	Y+1, r24	; 0x01
			val = (val>>pin);
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <pin_read+0xda>
    19f8:	55 95       	asr	r21
    19fa:	47 95       	ror	r20
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <pin_read+0xd6>
    1a00:	ca 01       	movw	r24, r20
    1a02:	89 83       	std	Y+1, r24	; 0x01
			return val;
    1a04:	59 81       	ldd	r21, Y+1	; 0x01
    1a06:	5c 83       	std	Y+4, r21	; 0x04
    1a08:	47 c0       	rjmp	.+142    	; 0x1a98 <pin_read+0x176>
		}
		case 'C' : {
			val = PINC;
    1a0a:	e3 e3       	ldi	r30, 0x33	; 51
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	89 83       	std	Y+1, r24	; 0x01
			val &= (1<<pin);
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <pin_read+0x100>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	2a 95       	dec	r18
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <pin_read+0xfc>
    1a26:	98 2f       	mov	r25, r24
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	89 23       	and	r24, r25
    1a2c:	89 83       	std	Y+1, r24	; 0x01
			val = (val>>pin);
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <pin_read+0x120>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <pin_read+0x11c>
    1a46:	ca 01       	movw	r24, r20
    1a48:	89 83       	std	Y+1, r24	; 0x01
			return val;
    1a4a:	59 81       	ldd	r21, Y+1	; 0x01
    1a4c:	5c 83       	std	Y+4, r21	; 0x04
    1a4e:	24 c0       	rjmp	.+72     	; 0x1a98 <pin_read+0x176>
		}
		case 'D' : {
			val = PIND;
    1a50:	e0 e3       	ldi	r30, 0x30	; 48
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	89 83       	std	Y+1, r24	; 0x01
			val &= (1<<pin);
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <pin_read+0x146>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	2a 95       	dec	r18
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <pin_read+0x142>
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	89 23       	and	r24, r25
    1a72:	89 83       	std	Y+1, r24	; 0x01
			val = (val>>pin);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a9 01       	movw	r20, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <pin_read+0x166>
    1a84:	55 95       	asr	r21
    1a86:	47 95       	ror	r20
    1a88:	8a 95       	dec	r24
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <pin_read+0x162>
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	89 83       	std	Y+1, r24	; 0x01
			return val;
    1a90:	59 81       	ldd	r21, Y+1	; 0x01
    1a92:	5c 83       	std	Y+4, r21	; 0x04
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <pin_read+0x176>
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <pin_read+0x17a>
		}
	}
}
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
    1a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9e:	27 96       	adiw	r28, 0x07	; 7
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <port_read>:

BYTE port_read(char port){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <port_read+0x6>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <port_read+0x8>
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3c 83       	std	Y+4, r19	; 0x04
    1ac8:	2b 83       	std	Y+3, r18	; 0x03
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	82 34       	cpi	r24, 0x42	; 66
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	d9 f0       	breq	.+54     	; 0x1b0a <port_read+0x5a>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	23 34       	cpi	r18, 0x43	; 67
    1ada:	31 05       	cpc	r19, r1
    1adc:	34 f4       	brge	.+12     	; 0x1aea <port_read+0x3a>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	81 34       	cpi	r24, 0x41	; 65
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <port_read+0x50>
    1ae8:	1f c0       	rjmp	.+62     	; 0x1b28 <port_read+0x78>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	23 34       	cpi	r18, 0x43	; 67
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <port_read+0x64>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	84 34       	cpi	r24, 0x44	; 68
    1afa:	91 05       	cpc	r25, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <port_read+0x6e>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <port_read+0x78>
		case 'A': return PINA;
    1b00:	e9 e3       	ldi	r30, 0x39	; 57
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	90 81       	ld	r25, Z
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	10 c0       	rjmp	.+32     	; 0x1b2a <port_read+0x7a>
		case 'B': return PINB;
    1b0a:	e6 e3       	ldi	r30, 0x36	; 54
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	20 81       	ld	r18, Z
    1b10:	2a 83       	std	Y+2, r18	; 0x02
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <port_read+0x7a>
		case 'C': return PINC;
    1b14:	e3 e3       	ldi	r30, 0x33	; 51
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	30 81       	ld	r19, Z
    1b1a:	3a 83       	std	Y+2, r19	; 0x02
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <port_read+0x7a>
		case 'D': return PIND;
    1b1e:	e0 e3       	ldi	r30, 0x30	; 48
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <port_read+0x7a>
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <port_read+0x7e>
	}
}
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	9d 83       	std	Y+5, r25	; 0x05
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <BUTTON_1_PRESS>:
extern volatile BYTE MONTH;
extern volatile unsigned int YEAR;

// Mode Bottom
void BUTTON_1_PRESS(void)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
		if(mode == 6) {mode = 0;}
    1b48:	80 91 6d 01 	lds	r24, 0x016D
    1b4c:	86 30       	cpi	r24, 0x06	; 6
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <BUTTON_1_PRESS+0x16>
    1b50:	10 92 6d 01 	sts	0x016D, r1
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <BUTTON_1_PRESS+0x20>
		else {mode++;}
    1b56:	80 91 6d 01 	lds	r24, 0x016D
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	80 93 6d 01 	sts	0x016D, r24
		clock_write(HR , MIN , SEC);
    1b60:	80 91 6f 01 	lds	r24, 0x016F
    1b64:	90 91 70 01 	lds	r25, 0x0170
    1b68:	20 91 6b 01 	lds	r18, 0x016B
    1b6c:	69 2f       	mov	r22, r25
    1b6e:	42 2f       	mov	r20, r18
    1b70:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
		date_write(DAY , MONTH, YEAR);
    1b74:	80 91 69 01 	lds	r24, 0x0169
    1b78:	90 91 6c 01 	lds	r25, 0x016C
    1b7c:	20 91 71 01 	lds	r18, 0x0171
    1b80:	30 91 72 01 	lds	r19, 0x0172
    1b84:	69 2f       	mov	r22, r25
    1b86:	a9 01       	movw	r20, r18
    1b88:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <BUTTON_2_PRESS>:


void BUTTON_2_PRESS(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	// increasing hours
	if(mode == 1){
    1b9c:	80 91 6d 01 	lds	r24, 0x016D
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	c1 f4       	brne	.+48     	; 0x1bd4 <BUTTON_2_PRESS+0x42>
		if(HR == 12) {HR = 1;}
    1ba4:	80 91 6f 01 	lds	r24, 0x016F
    1ba8:	8c 30       	cpi	r24, 0x0C	; 12
    1baa:	21 f4       	brne	.+8      	; 0x1bb4 <BUTTON_2_PRESS+0x22>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	80 93 6f 01 	sts	0x016F, r24
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <BUTTON_2_PRESS+0x2c>
		else {HR++;}
    1bb4:	80 91 6f 01 	lds	r24, 0x016F
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	80 93 6f 01 	sts	0x016F, r24
		clock_write(HR , MIN , SEC);
    1bbe:	80 91 6f 01 	lds	r24, 0x016F
    1bc2:	90 91 70 01 	lds	r25, 0x0170
    1bc6:	20 91 6b 01 	lds	r18, 0x016B
    1bca:	69 2f       	mov	r22, r25
    1bcc:	42 2f       	mov	r20, r18
    1bce:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1bd2:	b5 c0       	rjmp	.+362    	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
	}
	// increasing minuets
	else if(mode == 2){
    1bd4:	80 91 6d 01 	lds	r24, 0x016D
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	b9 f4       	brne	.+46     	; 0x1c0a <BUTTON_2_PRESS+0x78>
		if(MIN == 59) {MIN = 0;}
    1bdc:	80 91 70 01 	lds	r24, 0x0170
    1be0:	8b 33       	cpi	r24, 0x3B	; 59
    1be2:	19 f4       	brne	.+6      	; 0x1bea <BUTTON_2_PRESS+0x58>
    1be4:	10 92 70 01 	sts	0x0170, r1
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <BUTTON_2_PRESS+0x62>
		else {MIN++;}
    1bea:	80 91 70 01 	lds	r24, 0x0170
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	80 93 70 01 	sts	0x0170, r24
		clock_write(HR , MIN , SEC);
    1bf4:	80 91 6f 01 	lds	r24, 0x016F
    1bf8:	90 91 70 01 	lds	r25, 0x0170
    1bfc:	20 91 6b 01 	lds	r18, 0x016B
    1c00:	69 2f       	mov	r22, r25
    1c02:	42 2f       	mov	r20, r18
    1c04:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1c08:	9a c0       	rjmp	.+308    	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
	}
	// increasing seconds
	else if(mode == 3){
    1c0a:	80 91 6d 01 	lds	r24, 0x016D
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	b9 f4       	brne	.+46     	; 0x1c40 <BUTTON_2_PRESS+0xae>
		if(SEC == 59) {SEC = 0;}
    1c12:	80 91 6b 01 	lds	r24, 0x016B
    1c16:	8b 33       	cpi	r24, 0x3B	; 59
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <BUTTON_2_PRESS+0x8e>
    1c1a:	10 92 6b 01 	sts	0x016B, r1
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <BUTTON_2_PRESS+0x98>
		else {SEC++;}
    1c20:	80 91 6b 01 	lds	r24, 0x016B
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	80 93 6b 01 	sts	0x016B, r24
		clock_write(HR , MIN , SEC);
    1c2a:	80 91 6f 01 	lds	r24, 0x016F
    1c2e:	90 91 70 01 	lds	r25, 0x0170
    1c32:	20 91 6b 01 	lds	r18, 0x016B
    1c36:	69 2f       	mov	r22, r25
    1c38:	42 2f       	mov	r20, r18
    1c3a:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1c3e:	7f c0       	rjmp	.+254    	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
	}
	// increasing days
	else if(mode == 4){
    1c40:	80 91 6d 01 	lds	r24, 0x016D
    1c44:	84 30       	cpi	r24, 0x04	; 4
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <BUTTON_2_PRESS+0xb8>
    1c48:	43 c0       	rjmp	.+134    	; 0x1cd0 <BUTTON_2_PRESS+0x13e>
		BYTE max_days;
		if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
    1c4a:	80 91 6c 01 	lds	r24, 0x016C
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	c1 f0       	breq	.+48     	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c52:	80 91 6c 01 	lds	r24, 0x016C
    1c56:	83 30       	cpi	r24, 0x03	; 3
    1c58:	a1 f0       	breq	.+40     	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c5a:	80 91 6c 01 	lds	r24, 0x016C
    1c5e:	85 30       	cpi	r24, 0x05	; 5
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c62:	80 91 6c 01 	lds	r24, 0x016C
    1c66:	87 30       	cpi	r24, 0x07	; 7
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c6a:	80 91 6c 01 	lds	r24, 0x016C
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	41 f0       	breq	.+16     	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c72:	80 91 6c 01 	lds	r24, 0x016C
    1c76:	8a 30       	cpi	r24, 0x0A	; 10
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <BUTTON_2_PRESS+0xf0>
    1c7a:	80 91 6c 01 	lds	r24, 0x016C
    1c7e:	8c 30       	cpi	r24, 0x0C	; 12
    1c80:	19 f4       	brne	.+6      	; 0x1c88 <BUTTON_2_PRESS+0xf6>
    1c82:	8f e1       	ldi	r24, 0x1F	; 31
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	09 c0       	rjmp	.+18     	; 0x1c9a <BUTTON_2_PRESS+0x108>
		else if (MONTH == 2) max_days = 28;
    1c88:	80 91 6c 01 	lds	r24, 0x016C
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <BUTTON_2_PRESS+0x104>
    1c90:	8c e1       	ldi	r24, 0x1C	; 28
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <BUTTON_2_PRESS+0x108>
		else max_days = 30;
    1c96:	8e e1       	ldi	r24, 0x1E	; 30
    1c98:	89 83       	std	Y+1, r24	; 0x01

		if(DAY == max_days) {DAY = 1;}
    1c9a:	90 91 69 01 	lds	r25, 0x0169
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	98 17       	cp	r25, r24
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <BUTTON_2_PRESS+0x11a>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	80 93 69 01 	sts	0x0169, r24
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <BUTTON_2_PRESS+0x124>
		else {DAY++;}
    1cac:	80 91 69 01 	lds	r24, 0x0169
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	80 93 69 01 	sts	0x0169, r24
		date_write(DAY,MONTH,YEAR);
    1cb6:	80 91 69 01 	lds	r24, 0x0169
    1cba:	90 91 6c 01 	lds	r25, 0x016C
    1cbe:	20 91 71 01 	lds	r18, 0x0171
    1cc2:	30 91 72 01 	lds	r19, 0x0172
    1cc6:	69 2f       	mov	r22, r25
    1cc8:	a9 01       	movw	r20, r18
    1cca:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
    1cce:	37 c0       	rjmp	.+110    	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
	}
	// increasing months
	else if(mode==5){
    1cd0:	80 91 6d 01 	lds	r24, 0x016D
    1cd4:	85 30       	cpi	r24, 0x05	; 5
    1cd6:	d1 f4       	brne	.+52     	; 0x1d0c <BUTTON_2_PRESS+0x17a>
		if(MONTH==12) {MONTH = 1;}
    1cd8:	80 91 6c 01 	lds	r24, 0x016C
    1cdc:	8c 30       	cpi	r24, 0x0C	; 12
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <BUTTON_2_PRESS+0x156>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 6c 01 	sts	0x016C, r24
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <BUTTON_2_PRESS+0x160>
		else {MONTH++;}
    1ce8:	80 91 6c 01 	lds	r24, 0x016C
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 6c 01 	sts	0x016C, r24
		date_write(DAY,MONTH,YEAR);
    1cf2:	80 91 69 01 	lds	r24, 0x0169
    1cf6:	90 91 6c 01 	lds	r25, 0x016C
    1cfa:	20 91 71 01 	lds	r18, 0x0171
    1cfe:	30 91 72 01 	lds	r19, 0x0172
    1d02:	69 2f       	mov	r22, r25
    1d04:	a9 01       	movw	r20, r18
    1d06:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
    1d0a:	19 c0       	rjmp	.+50     	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
	}
	// increasing years
	else if(mode==6){
    1d0c:	80 91 6d 01 	lds	r24, 0x016D
    1d10:	86 30       	cpi	r24, 0x06	; 6
    1d12:	a9 f4       	brne	.+42     	; 0x1d3e <BUTTON_2_PRESS+0x1ac>
		YEAR++;
    1d14:	80 91 71 01 	lds	r24, 0x0171
    1d18:	90 91 72 01 	lds	r25, 0x0172
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	90 93 72 01 	sts	0x0172, r25
    1d22:	80 93 71 01 	sts	0x0171, r24
		date_write(DAY,MONTH,YEAR);
    1d26:	80 91 69 01 	lds	r24, 0x0169
    1d2a:	90 91 6c 01 	lds	r25, 0x016C
    1d2e:	20 91 71 01 	lds	r18, 0x0171
    1d32:	30 91 72 01 	lds	r19, 0x0172
    1d36:	69 2f       	mov	r22, r25
    1d38:	a9 01       	movw	r20, r18
    1d3a:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
	}
}
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <BUTTON_3_PRESS>:

void BUTTON_3_PRESS(void)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
		// decreasing hours
		if(mode == 1){
    1d50:	80 91 6d 01 	lds	r24, 0x016D
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	c1 f4       	brne	.+48     	; 0x1d88 <BUTTON_3_PRESS+0x42>
			if(HR == 1) {HR = 12;}
    1d58:	80 91 6f 01 	lds	r24, 0x016F
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <BUTTON_3_PRESS+0x22>
    1d60:	8c e0       	ldi	r24, 0x0C	; 12
    1d62:	80 93 6f 01 	sts	0x016F, r24
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <BUTTON_3_PRESS+0x2c>
			else {HR--;}
    1d68:	80 91 6f 01 	lds	r24, 0x016F
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	80 93 6f 01 	sts	0x016F, r24
			clock_write(HR , MIN , SEC);
    1d72:	80 91 6f 01 	lds	r24, 0x016F
    1d76:	90 91 70 01 	lds	r25, 0x0170
    1d7a:	20 91 6b 01 	lds	r18, 0x016B
    1d7e:	69 2f       	mov	r22, r25
    1d80:	42 2f       	mov	r20, r18
    1d82:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1d86:	b6 c0       	rjmp	.+364    	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
		}
		// decreasing minuets
		else if(mode == 2){
    1d88:	80 91 6d 01 	lds	r24, 0x016D
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	c1 f4       	brne	.+48     	; 0x1dc0 <BUTTON_3_PRESS+0x7a>
			if(MIN == 0) {MIN = 59;}
    1d90:	80 91 70 01 	lds	r24, 0x0170
    1d94:	88 23       	and	r24, r24
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <BUTTON_3_PRESS+0x5a>
    1d98:	8b e3       	ldi	r24, 0x3B	; 59
    1d9a:	80 93 70 01 	sts	0x0170, r24
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <BUTTON_3_PRESS+0x64>
			else {MIN--;}
    1da0:	80 91 70 01 	lds	r24, 0x0170
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	80 93 70 01 	sts	0x0170, r24
			clock_write(HR , MIN , SEC);
    1daa:	80 91 6f 01 	lds	r24, 0x016F
    1dae:	90 91 70 01 	lds	r25, 0x0170
    1db2:	20 91 6b 01 	lds	r18, 0x016B
    1db6:	69 2f       	mov	r22, r25
    1db8:	42 2f       	mov	r20, r18
    1dba:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1dbe:	9a c0       	rjmp	.+308    	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
		}
		// decreasing hours
		else if(mode == 3){
    1dc0:	80 91 6d 01 	lds	r24, 0x016D
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	c1 f4       	brne	.+48     	; 0x1df8 <BUTTON_3_PRESS+0xb2>
			if(SEC == 0) {SEC = 59;}
    1dc8:	80 91 6b 01 	lds	r24, 0x016B
    1dcc:	88 23       	and	r24, r24
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <BUTTON_3_PRESS+0x92>
    1dd0:	8b e3       	ldi	r24, 0x3B	; 59
    1dd2:	80 93 6b 01 	sts	0x016B, r24
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <BUTTON_3_PRESS+0x9c>
			else {SEC --;}
    1dd8:	80 91 6b 01 	lds	r24, 0x016B
    1ddc:	81 50       	subi	r24, 0x01	; 1
    1dde:	80 93 6b 01 	sts	0x016B, r24
			clock_write(HR , MIN , SEC);
    1de2:	80 91 6f 01 	lds	r24, 0x016F
    1de6:	90 91 70 01 	lds	r25, 0x0170
    1dea:	20 91 6b 01 	lds	r18, 0x016B
    1dee:	69 2f       	mov	r22, r25
    1df0:	42 2f       	mov	r20, r18
    1df2:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
    1df6:	7e c0       	rjmp	.+252    	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
		}
		// decreasing days
		else if(mode == 4){
    1df8:	80 91 6d 01 	lds	r24, 0x016D
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <BUTTON_3_PRESS+0xbc>
    1e00:	42 c0       	rjmp	.+132    	; 0x1e86 <BUTTON_3_PRESS+0x140>
			BYTE max_days;
			if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) max_days = 31;
    1e02:	80 91 6c 01 	lds	r24, 0x016C
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	c1 f0       	breq	.+48     	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e0a:	80 91 6c 01 	lds	r24, 0x016C
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	a1 f0       	breq	.+40     	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e12:	80 91 6c 01 	lds	r24, 0x016C
    1e16:	85 30       	cpi	r24, 0x05	; 5
    1e18:	81 f0       	breq	.+32     	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e1a:	80 91 6c 01 	lds	r24, 0x016C
    1e1e:	87 30       	cpi	r24, 0x07	; 7
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e22:	80 91 6c 01 	lds	r24, 0x016C
    1e26:	88 30       	cpi	r24, 0x08	; 8
    1e28:	41 f0       	breq	.+16     	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e2a:	80 91 6c 01 	lds	r24, 0x016C
    1e2e:	8a 30       	cpi	r24, 0x0A	; 10
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <BUTTON_3_PRESS+0xf4>
    1e32:	80 91 6c 01 	lds	r24, 0x016C
    1e36:	8c 30       	cpi	r24, 0x0C	; 12
    1e38:	19 f4       	brne	.+6      	; 0x1e40 <BUTTON_3_PRESS+0xfa>
    1e3a:	8f e1       	ldi	r24, 0x1F	; 31
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	09 c0       	rjmp	.+18     	; 0x1e52 <BUTTON_3_PRESS+0x10c>
			else if (MONTH == 2) max_days = 28;
    1e40:	80 91 6c 01 	lds	r24, 0x016C
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <BUTTON_3_PRESS+0x108>
    1e48:	8c e1       	ldi	r24, 0x1C	; 28
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <BUTTON_3_PRESS+0x10c>
			else max_days = 30;
    1e4e:	8e e1       	ldi	r24, 0x1E	; 30
    1e50:	89 83       	std	Y+1, r24	; 0x01

			if(DAY == 1) {DAY = max_days;}
    1e52:	80 91 69 01 	lds	r24, 0x0169
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <BUTTON_3_PRESS+0x11c>
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	80 93 69 01 	sts	0x0169, r24
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <BUTTON_3_PRESS+0x126>
			else {DAY--;}
    1e62:	80 91 69 01 	lds	r24, 0x0169
    1e66:	81 50       	subi	r24, 0x01	; 1
    1e68:	80 93 69 01 	sts	0x0169, r24
			date_write(DAY,MONTH,YEAR);
    1e6c:	80 91 69 01 	lds	r24, 0x0169
    1e70:	90 91 6c 01 	lds	r25, 0x016C
    1e74:	20 91 71 01 	lds	r18, 0x0171
    1e78:	30 91 72 01 	lds	r19, 0x0172
    1e7c:	69 2f       	mov	r22, r25
    1e7e:	a9 01       	movw	r20, r18
    1e80:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
    1e84:	37 c0       	rjmp	.+110    	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
		}
		// decreasing months
		else if(mode==5){
    1e86:	80 91 6d 01 	lds	r24, 0x016D
    1e8a:	85 30       	cpi	r24, 0x05	; 5
    1e8c:	d1 f4       	brne	.+52     	; 0x1ec2 <BUTTON_3_PRESS+0x17c>
			if(MONTH==1) {MONTH = 12;}
    1e8e:	80 91 6c 01 	lds	r24, 0x016C
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <BUTTON_3_PRESS+0x158>
    1e96:	8c e0       	ldi	r24, 0x0C	; 12
    1e98:	80 93 6c 01 	sts	0x016C, r24
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <BUTTON_3_PRESS+0x162>
			else {MONTH--;}
    1e9e:	80 91 6c 01 	lds	r24, 0x016C
    1ea2:	81 50       	subi	r24, 0x01	; 1
    1ea4:	80 93 6c 01 	sts	0x016C, r24
			date_write(DAY,MONTH,YEAR);
    1ea8:	80 91 69 01 	lds	r24, 0x0169
    1eac:	90 91 6c 01 	lds	r25, 0x016C
    1eb0:	20 91 71 01 	lds	r18, 0x0171
    1eb4:	30 91 72 01 	lds	r19, 0x0172
    1eb8:	69 2f       	mov	r22, r25
    1eba:	a9 01       	movw	r20, r18
    1ebc:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
    1ec0:	19 c0       	rjmp	.+50     	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
		}
		// decreasing years
		else if(mode==6){
    1ec2:	80 91 6d 01 	lds	r24, 0x016D
    1ec6:	86 30       	cpi	r24, 0x06	; 6
    1ec8:	a9 f4       	brne	.+42     	; 0x1ef4 <BUTTON_3_PRESS+0x1ae>
			YEAR--;
    1eca:	80 91 71 01 	lds	r24, 0x0171
    1ece:	90 91 72 01 	lds	r25, 0x0172
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	90 93 72 01 	sts	0x0172, r25
    1ed8:	80 93 71 01 	sts	0x0171, r24
			date_write(DAY,MONTH,YEAR);
    1edc:	80 91 69 01 	lds	r24, 0x0169
    1ee0:	90 91 6c 01 	lds	r25, 0x016C
    1ee4:	20 91 71 01 	lds	r18, 0x0171
    1ee8:	30 91 72 01 	lds	r19, 0x0172
    1eec:	69 2f       	mov	r22, r25
    1eee:	a9 01       	movw	r20, r18
    1ef0:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
		}
}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <LCD_cmd>:
#include "LCD.h"

#define PM 0
#define AM 1

void LCD_cmd(BYTE cmd){
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	6d 97       	sbiw	r28, 0x1d	; 29
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	8d 8f       	std	Y+29, r24	; 0x1d
	port_write('A' , cmd); // write command on data bus
    1f12:	81 e4       	ldi	r24, 0x41	; 65
    1f14:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f16:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <port_write>
	pin_write('B',5,0); // RS = 0
    1f1a:	82 e4       	ldi	r24, 0x42	; 66
    1f1c:	65 e0       	ldi	r22, 0x05	; 5
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
	pin_write('B',6,0); // RW = 0
    1f24:	82 e4       	ldi	r24, 0x42	; 66
    1f26:	66 e0       	ldi	r22, 0x06	; 6
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>

	pin_write('B',7,1); // E pulse high
    1f2e:	82 e4       	ldi	r24, 0x42	; 66
    1f30:	67 e0       	ldi	r22, 0x07	; 7
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e8       	ldi	r26, 0x80	; 128
    1f3e:	bf e3       	ldi	r27, 0x3F	; 63
    1f40:	89 8f       	std	Y+25, r24	; 0x19
    1f42:	9a 8f       	std	Y+26, r25	; 0x1a
    1f44:	ab 8f       	std	Y+27, r26	; 0x1b
    1f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a e7       	ldi	r20, 0x7A	; 122
    1f56:	53 e4       	ldi	r21, 0x43	; 67
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8d 8b       	std	Y+21, r24	; 0x15
    1f62:	9e 8b       	std	Y+22, r25	; 0x16
    1f64:	af 8b       	std	Y+23, r26	; 0x17
    1f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_cmd+0x8e>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 8b       	std	Y+20, r25	; 0x14
    1f86:	8b 8b       	std	Y+19, r24	; 0x13
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_cmd+0x10c>
	else if (__tmp > 65535)
    1f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f90:	98 8d       	ldd	r25, Y+24	; 0x18
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_cmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9c 8b       	std	Y+20, r25	; 0x14
    1fc8:	8b 8b       	std	Y+19, r24	; 0x13
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_cmd+0xee>
    1fcc:	89 e1       	ldi	r24, 0x19	; 25
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9a 8b       	std	Y+18, r25	; 0x12
    1fd2:	89 8b       	std	Y+17, r24	; 0x11
    1fd4:	89 89       	ldd	r24, Y+17	; 0x11
    1fd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_cmd+0xdc>
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_cmd+0xd0>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <LCD_cmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	98 8b       	std	Y+16, r25	; 0x10
    200e:	8f 87       	std	Y+15, r24	; 0x0f
    2010:	8f 85       	ldd	r24, Y+15	; 0x0f
    2012:	98 89       	ldd	r25, Y+16	; 0x10
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_cmd+0x118>
    2018:	98 8b       	std	Y+16, r25	; 0x10
    201a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pin_write('B',7,0); // E pulse low
    201c:	82 e4       	ldi	r24, 0x42	; 66
    201e:	67 e0       	ldi	r22, 0x07	; 7
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e4       	ldi	r26, 0x40	; 64
    202c:	b0 e4       	ldi	r27, 0x40	; 64
    202e:	8b 87       	std	Y+11, r24	; 0x0b
    2030:	9c 87       	std	Y+12, r25	; 0x0c
    2032:	ad 87       	std	Y+13, r26	; 0x0d
    2034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	53 e4       	ldi	r21, 0x43	; 67
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8f 83       	std	Y+7, r24	; 0x07
    2050:	98 87       	std	Y+8, r25	; 0x08
    2052:	a9 87       	std	Y+9, r26	; 0x09
    2054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_cmd+0x17c>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_cmd+0x1fa>
	else if (__tmp > 65535)
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_cmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_cmd+0x1dc>
    20ba:	89 e1       	ldi	r24, 0x19	; 25
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9c 83       	std	Y+4, r25	; 0x04
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_cmd+0x1ca>
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_cmd+0x1be>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <LCD_cmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_cmd+0x206>
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);

}
    210a:	6d 96       	adiw	r28, 0x1d	; 29
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_init>:

void LCD_init (){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2e 97       	sbiw	r28, 0x0e	; 14
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
		Always connect RS to PORTB5
		Always connect RW to PORTB6
		Always connect E  to PORTB7
	*/

	pin_mode('A' , 0 , OUTPUT); //D0
    2130:	81 e4       	ldi	r24, 0x41	; 65
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 1 , OUTPUT); //D1
    213a:	81 e4       	ldi	r24, 0x41	; 65
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 2 , OUTPUT); //D2
    2144:	81 e4       	ldi	r24, 0x41	; 65
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 3 , OUTPUT); //D3
    214e:	81 e4       	ldi	r24, 0x41	; 65
    2150:	63 e0       	ldi	r22, 0x03	; 3
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 4 , OUTPUT); //D4
    2158:	81 e4       	ldi	r24, 0x41	; 65
    215a:	64 e0       	ldi	r22, 0x04	; 4
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 5 , OUTPUT); //D5
    2162:	81 e4       	ldi	r24, 0x41	; 65
    2164:	65 e0       	ldi	r22, 0x05	; 5
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 6 , OUTPUT); //D6
    216c:	81 e4       	ldi	r24, 0x41	; 65
    216e:	66 e0       	ldi	r22, 0x06	; 6
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('A' , 7 , OUTPUT); //D7
    2176:	81 e4       	ldi	r24, 0x41	; 65
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>

	pin_mode('B' , 5 , OUTPUT); //RS instruction\data (0\1)
    2180:	82 e4       	ldi	r24, 0x42	; 66
    2182:	65 e0       	ldi	r22, 0x05	; 5
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('B' , 6 , OUTPUT); //R\W (1\0)
    218a:	82 e4       	ldi	r24, 0x42	; 66
    218c:	66 e0       	ldi	r22, 0x06	; 6
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
	pin_mode('B' , 7 , OUTPUT); //E
    2194:	82 e4       	ldi	r24, 0x42	; 66
    2196:	67 e0       	ldi	r22, 0x07	; 7
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <pin_mode>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 ea       	ldi	r26, 0xA0	; 160
    21a4:	b1 e4       	ldi	r27, 0x41	; 65
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
    21a8:	9c 87       	std	Y+12, r25	; 0x0c
    21aa:	ad 87       	std	Y+13, r26	; 0x0d
    21ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	a9 87       	std	Y+9, r26	; 0x09
    21cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_init+0xd4>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_init+0x152>
	else if (__tmp > 65535)
    21f0:	6f 81       	ldd	r22, Y+7	; 0x07
    21f2:	78 85       	ldd	r23, Y+8	; 0x08
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_init+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_init+0x134>
    2232:	89 e1       	ldi	r24, 0x19	; 25
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_init+0x122>
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_init+0x116>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_init+0x15e>
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_cmd(0x38); // Enable 8-bit mode
    2282:	88 e3       	ldi	r24, 0x38	; 56
    2284:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
	LCD_cmd(0x0C); // Display ON & Cursor OFF
    2288:	8c e0       	ldi	r24, 0x0C	; 12
    228a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
	LCD_cmd(0x06); // Auto increment cursor
    228e:	86 e0       	ldi	r24, 0x06	; 6
    2290:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
	LCD_cmd(0x01); // Clear display
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
	LCD_cmd(0x80); // cursor at home position
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
}
    22a0:	2e 96       	adiw	r28, 0x0e	; 14
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <LCD_write_char>:

void LCD_write_char(BYTE data){
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	6d 97       	sbiw	r28, 0x1d	; 29
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	8d 8f       	std	Y+29, r24	; 0x1d
	port_write('A' , data); // write command on data bus
    22c8:	81 e4       	ldi	r24, 0x41	; 65
    22ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22cc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <port_write>
	pin_write('B',0,5); // RS = 1
    22d0:	82 e4       	ldi	r24, 0x42	; 66
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	45 e0       	ldi	r20, 0x05	; 5
    22d6:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
	pin_write('B',1,6); // RW = 0
    22da:	82 e4       	ldi	r24, 0x42	; 66
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	46 e0       	ldi	r20, 0x06	; 6
    22e0:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>

	pin_write('B',7,1); // E pulse high
    22e4:	82 e4       	ldi	r24, 0x42	; 66
    22e6:	67 e0       	ldi	r22, 0x07	; 7
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e8       	ldi	r26, 0x80	; 128
    22f4:	bf e3       	ldi	r27, 0x3F	; 63
    22f6:	89 8f       	std	Y+25, r24	; 0x19
    22f8:	9a 8f       	std	Y+26, r25	; 0x1a
    22fa:	ab 8f       	std	Y+27, r26	; 0x1b
    22fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a e7       	ldi	r20, 0x7A	; 122
    230c:	53 e4       	ldi	r21, 0x43	; 67
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8d 8b       	std	Y+21, r24	; 0x15
    2318:	9e 8b       	std	Y+22, r25	; 0x16
    231a:	af 8b       	std	Y+23, r26	; 0x17
    231c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231e:	6d 89       	ldd	r22, Y+21	; 0x15
    2320:	7e 89       	ldd	r23, Y+22	; 0x16
    2322:	8f 89       	ldd	r24, Y+23	; 0x17
    2324:	98 8d       	ldd	r25, Y+24	; 0x18
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <LCD_write_char+0x8e>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	3f c0       	rjmp	.+126    	; 0x23be <LCD_write_char+0x10c>
	else if (__tmp > 65535)
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <LCD_write_char+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	69 8d       	ldd	r22, Y+25	; 0x19
    235a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <LCD_write_char+0xee>
    2382:	89 e1       	ldi	r24, 0x19	; 25
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9a 8b       	std	Y+18, r25	; 0x12
    2388:	89 8b       	std	Y+17, r24	; 0x11
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	9a 89       	ldd	r25, Y+18	; 0x12
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_write_char+0xdc>
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <LCD_write_char+0xd0>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <LCD_write_char+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	98 8b       	std	Y+16, r25	; 0x10
    23c4:	8f 87       	std	Y+15, r24	; 0x0f
    23c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c8:	98 89       	ldd	r25, Y+16	; 0x10
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_write_char+0x118>
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	pin_write('B',7,0); // E pulse low
    23d2:	82 e4       	ldi	r24, 0x42	; 66
    23d4:	67 e0       	ldi	r22, 0x07	; 7
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 5f 0b 	call	0x16be	; 0x16be <pin_write>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e4       	ldi	r26, 0x40	; 64
    23e2:	b0 e4       	ldi	r27, 0x40	; 64
    23e4:	8b 87       	std	Y+11, r24	; 0x0b
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	ad 87       	std	Y+13, r26	; 0x0d
    23ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a e7       	ldi	r20, 0x7A	; 122
    23fa:	53 e4       	ldi	r21, 0x43	; 67
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8f 83       	std	Y+7, r24	; 0x07
    2406:	98 87       	std	Y+8, r25	; 0x08
    2408:	a9 87       	std	Y+9, r26	; 0x09
    240a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <LCD_write_char+0x17c>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <LCD_write_char+0x1fa>
	else if (__tmp > 65535)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <LCD_write_char+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	0f c0       	rjmp	.+30     	; 0x248e <LCD_write_char+0x1dc>
    2470:	89 e1       	ldi	r24, 0x19	; 25
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_write_char+0x1ca>
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <LCD_write_char+0x1be>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <LCD_write_char+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_write_char+0x206>
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    24c0:	6d 96       	adiw	r28, 0x1d	; 29
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_write>:

void LCD_write(BYTE* data){
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_write+0x6>
    24d8:	0f 92       	push	r0
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9b 83       	std	Y+3, r25	; 0x03
    24e0:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i = 0;
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <LCD_write+0x30>
	while(data[i] != '\0'){
		LCD_write_char(data[i]);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_write_char>
		i++;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}

void LCD_write(BYTE* data){
	BYTE i = 0;
	while(data[i] != '\0'){
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	fc 01       	movw	r30, r24
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	39 f7       	brne	.-50     	; 0x24e6 <LCD_write+0x14>
		LCD_write_char(data[i]);
		i++;
	}

}
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <LCD_startfrom>:

void LCD_startfrom(BYTE row , BYTE pos){
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <LCD_startfrom+0x6>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	6a 83       	std	Y+2, r22	; 0x02
	if (row != 1 && row!=2) return;
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	19 f0       	breq	.+6      	; 0x253e <LCD_startfrom+0x1a>
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	a1 f4       	brne	.+40     	; 0x2566 <LCD_startfrom+0x42>
	if (pos>16) return;
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	81 31       	cpi	r24, 0x11	; 17
    2542:	88 f4       	brcc	.+34     	; 0x2566 <LCD_startfrom+0x42>

	if (row == 1) LCD_cmd((pos & 0x0F) | 0x80);
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	31 f4       	brne	.+12     	; 0x2556 <LCD_startfrom+0x32>
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	8f 70       	andi	r24, 0x0F	; 15
    254e:	80 68       	ori	r24, 0x80	; 128
    2550:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
    2554:	08 c0       	rjmp	.+16     	; 0x2566 <LCD_startfrom+0x42>
	else if (row == 2) LCD_cmd((pos & 0x0F) | 0xC0);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	29 f4       	brne	.+10     	; 0x2566 <LCD_startfrom+0x42>
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	8f 70       	andi	r24, 0x0F	; 15
    2560:	80 6c       	ori	r24, 0xC0	; 192
    2562:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_cmd>
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <start>:
BYTE TIME;
BYTE previous_time;

BYTE flag;

void start(){
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	mode = 0;
    2578:	10 92 6d 01 	sts	0x016D, r1

	HR = 10;
    257c:	8a e0       	ldi	r24, 0x0A	; 10
    257e:	80 93 6f 01 	sts	0x016F, r24
	MIN =1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	80 93 70 01 	sts	0x0170, r24
	SEC = 00;
    2588:	10 92 6b 01 	sts	0x016B, r1

	DAY = 8;
    258c:	88 e0       	ldi	r24, 0x08	; 8
    258e:	80 93 69 01 	sts	0x0169, r24
	MONTH = 9;
    2592:	89 e0       	ldi	r24, 0x09	; 9
    2594:	80 93 6c 01 	sts	0x016C, r24
	YEAR = 2024;
    2598:	88 ee       	ldi	r24, 0xE8	; 232
    259a:	97 e0       	ldi	r25, 0x07	; 7
    259c:	90 93 72 01 	sts	0x0172, r25
    25a0:	80 93 71 01 	sts	0x0171, r24

	TIME = PM;
    25a4:	10 92 68 01 	sts	0x0168, r1
	previous_time = TIME;
    25a8:	80 91 68 01 	lds	r24, 0x0168
    25ac:	80 93 6e 01 	sts	0x016E, r24

	flag = 0;
    25b0:	10 92 6a 01 	sts	0x016A, r1
	LCD_init();
    25b4:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_init>
	 //interrupt_init();

	timer_init();
    25b8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <timer_init>
	clock_write(HR,MIN,SEC);
    25bc:	80 91 6f 01 	lds	r24, 0x016F
    25c0:	90 91 70 01 	lds	r25, 0x0170
    25c4:	20 91 6b 01 	lds	r18, 0x016B
    25c8:	69 2f       	mov	r22, r25
    25ca:	42 2f       	mov	r20, r18
    25cc:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
	date_write(DAY,MONTH,YEAR);
    25d0:	80 91 69 01 	lds	r24, 0x0169
    25d4:	90 91 6c 01 	lds	r25, 0x016C
    25d8:	20 91 71 01 	lds	r18, 0x0171
    25dc:	30 91 72 01 	lds	r19, 0x0172
    25e0:	69 2f       	mov	r22, r25
    25e2:	a9 01       	movw	r20, r18
    25e4:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <engine>:

void engine()
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
	if(mode == 0)
    25f8:	80 91 6d 01 	lds	r24, 0x016D
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <engine+0x14>
    2600:	aa c0       	rjmp	.+340    	; 0x2756 <engine+0x168>
	{
		if(flag == 1) {// one second
    2602:	80 91 6a 01 	lds	r24, 0x016A
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	09 f0       	breq	.+2      	; 0x260c <engine+0x1e>
    260a:	a5 c0       	rjmp	.+330    	; 0x2756 <engine+0x168>
			SEC++;
    260c:	80 91 6b 01 	lds	r24, 0x016B
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	80 93 6b 01 	sts	0x016B, r24
			flag=0;
    2616:	10 92 6a 01 	sts	0x016A, r1
			if(SEC == 60){
    261a:	80 91 6b 01 	lds	r24, 0x016B
    261e:	8c 33       	cpi	r24, 0x3C	; 60
    2620:	39 f4       	brne	.+14     	; 0x2630 <engine+0x42>
				MIN++;
    2622:	80 91 70 01 	lds	r24, 0x0170
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	80 93 70 01 	sts	0x0170, r24
				SEC=0;
    262c:	10 92 6b 01 	sts	0x016B, r1
			}

			if (MIN > 59){
    2630:	80 91 70 01 	lds	r24, 0x0170
    2634:	8c 33       	cpi	r24, 0x3C	; 60
    2636:	38 f0       	brcs	.+14     	; 0x2646 <engine+0x58>
				HR++;
    2638:	80 91 6f 01 	lds	r24, 0x016F
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 93 6f 01 	sts	0x016F, r24
				MIN=0;
    2642:	10 92 70 01 	sts	0x0170, r1
			}

			if (HR > 12){
    2646:	80 91 6f 01 	lds	r24, 0x016F
    264a:	8d 30       	cpi	r24, 0x0D	; 13
    264c:	18 f0       	brcs	.+6      	; 0x2654 <engine+0x66>
				HR=1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	80 93 6f 01 	sts	0x016F, r24
			}

			if(HR == 12){
    2654:	80 91 6f 01 	lds	r24, 0x016F
    2658:	8c 30       	cpi	r24, 0x0C	; 12
    265a:	71 f4       	brne	.+28     	; 0x2678 <engine+0x8a>
				if(TIME==AM) {TIME = PM;}
    265c:	80 91 68 01 	lds	r24, 0x0168
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	19 f4       	brne	.+6      	; 0x266a <engine+0x7c>
    2664:	10 92 68 01 	sts	0x0168, r1
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <engine+0x8a>
				else if(TIME == PM) {TIME = AM;}
    266a:	80 91 68 01 	lds	r24, 0x0168
    266e:	88 23       	and	r24, r24
    2670:	19 f4       	brne	.+6      	; 0x2678 <engine+0x8a>
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	80 93 68 01 	sts	0x0168, r24
			}

			if(previous_time == PM && TIME == AM) {//new day
    2678:	80 91 6e 01 	lds	r24, 0x016E
    267c:	88 23       	and	r24, r24
    267e:	09 f0       	breq	.+2      	; 0x2682 <engine+0x94>
    2680:	54 c0       	rjmp	.+168    	; 0x272a <engine+0x13c>
    2682:	80 91 68 01 	lds	r24, 0x0168
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	09 f0       	breq	.+2      	; 0x268c <engine+0x9e>
    268a:	4f c0       	rjmp	.+158    	; 0x272a <engine+0x13c>
				previous_time = TIME;
    268c:	80 91 68 01 	lds	r24, 0x0168
    2690:	80 93 6e 01 	sts	0x016E, r24
				BYTE max_days;
				if(MONTH==1 ||MONTH==3 ||MONTH==5 ||MONTH==7 ||MONTH==8 ||MONTH==10 ||MONTH==12) {//31 days in these months
    2694:	80 91 6c 01 	lds	r24, 0x016C
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	c1 f0       	breq	.+48     	; 0x26cc <engine+0xde>
    269c:	80 91 6c 01 	lds	r24, 0x016C
    26a0:	83 30       	cpi	r24, 0x03	; 3
    26a2:	a1 f0       	breq	.+40     	; 0x26cc <engine+0xde>
    26a4:	80 91 6c 01 	lds	r24, 0x016C
    26a8:	85 30       	cpi	r24, 0x05	; 5
    26aa:	81 f0       	breq	.+32     	; 0x26cc <engine+0xde>
    26ac:	80 91 6c 01 	lds	r24, 0x016C
    26b0:	87 30       	cpi	r24, 0x07	; 7
    26b2:	61 f0       	breq	.+24     	; 0x26cc <engine+0xde>
    26b4:	80 91 6c 01 	lds	r24, 0x016C
    26b8:	88 30       	cpi	r24, 0x08	; 8
    26ba:	41 f0       	breq	.+16     	; 0x26cc <engine+0xde>
    26bc:	80 91 6c 01 	lds	r24, 0x016C
    26c0:	8a 30       	cpi	r24, 0x0A	; 10
    26c2:	21 f0       	breq	.+8      	; 0x26cc <engine+0xde>
    26c4:	80 91 6c 01 	lds	r24, 0x016C
    26c8:	8c 30       	cpi	r24, 0x0C	; 12
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <engine+0xe4>
				max_days=31;
    26cc:	8f e1       	ldi	r24, 0x1F	; 31
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <engine+0xf6>
				}
				else if(MONTH==2) max_days = 28;
    26d2:	80 91 6c 01 	lds	r24, 0x016C
    26d6:	82 30       	cpi	r24, 0x02	; 2
    26d8:	19 f4       	brne	.+6      	; 0x26e0 <engine+0xf2>
    26da:	8c e1       	ldi	r24, 0x1C	; 28
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <engine+0xf6>
				else max_days = 30;
    26e0:	8e e1       	ldi	r24, 0x1E	; 30
    26e2:	89 83       	std	Y+1, r24	; 0x01

				if (DAY==max_days)
    26e4:	90 91 69 01 	lds	r25, 0x0169
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	98 17       	cp	r25, r24
    26ec:	49 f4       	brne	.+18     	; 0x2700 <engine+0x112>
				{
					MONTH++;
    26ee:	80 91 6c 01 	lds	r24, 0x016C
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	80 93 6c 01 	sts	0x016C, r24
					DAY = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 69 01 	sts	0x0169, r24
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <engine+0x11c>
				}
				else {DAY++;}
    2700:	80 91 69 01 	lds	r24, 0x0169
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	80 93 69 01 	sts	0x0169, r24

				if(MONTH == 12){
    270a:	80 91 6c 01 	lds	r24, 0x016C
    270e:	8c 30       	cpi	r24, 0x0C	; 12
    2710:	61 f4       	brne	.+24     	; 0x272a <engine+0x13c>
					YEAR++;
    2712:	80 91 71 01 	lds	r24, 0x0171
    2716:	90 91 72 01 	lds	r25, 0x0172
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	90 93 72 01 	sts	0x0172, r25
    2720:	80 93 71 01 	sts	0x0171, r24
					MONTH = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	80 93 6c 01 	sts	0x016C, r24
				}
			}

			clock_write(HR,MIN,SEC);
    272a:	80 91 6f 01 	lds	r24, 0x016F
    272e:	90 91 70 01 	lds	r25, 0x0170
    2732:	20 91 6b 01 	lds	r18, 0x016B
    2736:	69 2f       	mov	r22, r25
    2738:	42 2f       	mov	r20, r18
    273a:	0e 94 75 07 	call	0xeea	; 0xeea <clock_write>
			date_write(DAY,MONTH,YEAR);
    273e:	80 91 69 01 	lds	r24, 0x0169
    2742:	90 91 6c 01 	lds	r25, 0x016C
    2746:	20 91 71 01 	lds	r18, 0x0171
    274a:	30 91 72 01 	lds	r19, 0x0172
    274e:	69 2f       	mov	r22, r25
    2750:	a9 01       	movw	r20, r18
    2752:	0e 94 0c 09 	call	0x1218	; 0x1218 <date_write>
		/**/
	}



}
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <__vector_19>:
#include <avr/interrupt.h>

extern volatile BYTE flag;
volatile BYTE tick;

ISR(TIMER0_COMP_vect){
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	8f 93       	push	r24
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	//////////////////////////////////////////////////////////////////////////
	//changed
	if(tick==5){
    2772:	80 91 73 01 	lds	r24, 0x0173
    2776:	85 30       	cpi	r24, 0x05	; 5
    2778:	31 f4       	brne	.+12     	; 0x2786 <__vector_19+0x28>
		flag = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	80 93 6a 01 	sts	0x016A, r24
		tick = 0;
    2780:	10 92 73 01 	sts	0x0173, r1
    2784:	05 c0       	rjmp	.+10     	; 0x2790 <__vector_19+0x32>
	}
	else{tick++;}
    2786:	80 91 73 01 	lds	r24, 0x0173
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	80 93 73 01 	sts	0x0173, r24
}
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	8f 91       	pop	r24
    2796:	0f 90       	pop	r0
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	0f 90       	pop	r0
    279c:	1f 90       	pop	r1
    279e:	18 95       	reti

000027a0 <timer_init>:

void timer_init(){
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	tick = 0;
    27a8:	10 92 73 01 	sts	0x0173, r1
	sei();
    27ac:	78 94       	sei
	//SREG |= (1<<7);  // Enable global interrupt
	TIMSK |= (1<<1); // Enable Timer interrupt
    27ae:	a9 e5       	ldi	r26, 0x59	; 89
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e9 e5       	ldi	r30, 0x59	; 89
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	82 60       	ori	r24, 0x02	; 2
    27ba:	8c 93       	st	X, r24
	// SET CTC MODE
	TCCR0 &= ~(1<<6);
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7b       	andi	r24, 0xBF	; 191
    27c8:	8c 93       	st	X, r24
	TCCR0 |= (1<<3);
    27ca:	a3 e5       	ldi	r26, 0x53	; 83
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e3 e5       	ldi	r30, 0x53	; 83
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	88 60       	ori	r24, 0x08	; 8
    27d6:	8c 93       	st	X, r24
	// SET COUNTER CLOCK
	TCCR0 |= (1<<0);
    27d8:	a3 e5       	ldi	r26, 0x53	; 83
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e3 e5       	ldi	r30, 0x53	; 83
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	81 60       	ori	r24, 0x01	; 1
    27e4:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<1);
    27e6:	a3 e5       	ldi	r26, 0x53	; 83
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e3 e5       	ldi	r30, 0x53	; 83
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	8d 7f       	andi	r24, 0xFD	; 253
    27f2:	8c 93       	st	X, r24
	TCCR0 |= (1<<2);
    27f4:	a3 e5       	ldi	r26, 0x53	; 83
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e3 e5       	ldi	r30, 0x53	; 83
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	84 60       	ori	r24, 0x04	; 4
    2800:	8c 93       	st	X, r24
	// SET COMPARING VALUE
	//////////////////////////////////////////////////////////////////////////
	//changed
	OCR0 = 200;
    2802:	ec e5       	ldi	r30, 0x5C	; 92
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	88 ec       	ldi	r24, 0xC8	; 200
    2808:	80 83       	st	Z, r24
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <main>:
#include "schedular.h"
#include "Interrupt.h"
#include "DIO.h"

int main(void)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	aa 97       	sbiw	r28, 0x2a	; 42
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
		//////////////////////////////////////////////////////////////////////////
		//changed
		//first 3 pins in PORTB input with pull up resistor
	DDRB=0;
    2824:	e7 e3       	ldi	r30, 0x37	; 55
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	10 82       	st	Z, r1
	PORTB=0X07;
    282a:	e8 e3       	ldi	r30, 0x38	; 56
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	87 e0       	ldi	r24, 0x07	; 7
    2830:	80 83       	st	Z, r24

	start();
    2832:	0e 94 b8 12 	call	0x2570	; 0x2570 <start>

	while (1)
    {
		engine();
    2836:	0e 94 f7 12 	call	0x25ee	; 0x25ee <engine>
		//////////////////////////////////////////////////////////////////////////
		//changed
		if(pin_read('B',0)==0)
    283a:	82 e4       	ldi	r24, 0x42	; 66
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	0e 94 91 0c 	call	0x1922	; 0x1922 <pin_read>
    2842:	88 23       	and	r24, r24
    2844:	09 f0       	breq	.+2      	; 0x2848 <main+0x38>
    2846:	75 c0       	rjmp	.+234    	; 0x2932 <main+0x122>
		{
			BUTTON_1_PRESS();
    2848:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <BUTTON_1_PRESS>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	aa e7       	ldi	r26, 0x7A	; 122
    2852:	b3 e4       	ldi	r27, 0x43	; 67
    2854:	8f a3       	std	Y+39, r24	; 0x27
    2856:	98 a7       	std	Y+40, r25	; 0x28
    2858:	a9 a7       	std	Y+41, r26	; 0x29
    285a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	6f a1       	ldd	r22, Y+39	; 0x27
    285e:	78 a5       	ldd	r23, Y+40	; 0x28
    2860:	89 a5       	ldd	r24, Y+41	; 0x29
    2862:	9a a5       	ldd	r25, Y+42	; 0x2a
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a e7       	ldi	r20, 0x7A	; 122
    286a:	53 e4       	ldi	r21, 0x43	; 67
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8b a3       	std	Y+35, r24	; 0x23
    2876:	9c a3       	std	Y+36, r25	; 0x24
    2878:	ad a3       	std	Y+37, r26	; 0x25
    287a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    287c:	6b a1       	ldd	r22, Y+35	; 0x23
    287e:	7c a1       	ldd	r23, Y+36	; 0x24
    2880:	8d a1       	ldd	r24, Y+37	; 0x25
    2882:	9e a1       	ldd	r25, Y+38	; 0x26
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <main+0x8e>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9a a3       	std	Y+34, r25	; 0x22
    289a:	89 a3       	std	Y+33, r24	; 0x21
    289c:	3f c0       	rjmp	.+126    	; 0x291c <main+0x10c>
	else if (__tmp > 65535)
    289e:	6b a1       	ldd	r22, Y+35	; 0x23
    28a0:	7c a1       	ldd	r23, Y+36	; 0x24
    28a2:	8d a1       	ldd	r24, Y+37	; 0x25
    28a4:	9e a1       	ldd	r25, Y+38	; 0x26
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	6f a1       	ldd	r22, Y+39	; 0x27
    28b8:	78 a5       	ldd	r23, Y+40	; 0x28
    28ba:	89 a5       	ldd	r24, Y+41	; 0x29
    28bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9a a3       	std	Y+34, r25	; 0x22
    28dc:	89 a3       	std	Y+33, r24	; 0x21
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <main+0xee>
    28e0:	89 e1       	ldi	r24, 0x19	; 25
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	98 a3       	std	Y+32, r25	; 0x20
    28e6:	8f 8f       	std	Y+31, r24	; 0x1f
    28e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ea:	98 a1       	ldd	r25, Y+32	; 0x20
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <main+0xdc>
    28f0:	98 a3       	std	Y+32, r25	; 0x20
    28f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9a a3       	std	Y+34, r25	; 0x22
    28fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2900:	9a a1       	ldd	r25, Y+34	; 0x22
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <main+0xd0>
    2906:	97 cf       	rjmp	.-210    	; 0x2836 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6b a1       	ldd	r22, Y+35	; 0x23
    290a:	7c a1       	ldd	r23, Y+36	; 0x24
    290c:	8d a1       	ldd	r24, Y+37	; 0x25
    290e:	9e a1       	ldd	r25, Y+38	; 0x26
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9a a3       	std	Y+34, r25	; 0x22
    291a:	89 a3       	std	Y+33, r24	; 0x21
    291c:	89 a1       	ldd	r24, Y+33	; 0x21
    291e:	9a a1       	ldd	r25, Y+34	; 0x22
    2920:	9e 8f       	std	Y+30, r25	; 0x1e
    2922:	8d 8f       	std	Y+29, r24	; 0x1d
    2924:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2926:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <main+0x118>
    292c:	9e 8f       	std	Y+30, r25	; 0x1e
    292e:	8d 8f       	std	Y+29, r24	; 0x1d
    2930:	82 cf       	rjmp	.-252    	; 0x2836 <main+0x26>
			_delay_ms(250);
		}
		else if (pin_read('B',1)==0)
    2932:	82 e4       	ldi	r24, 0x42	; 66
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	0e 94 91 0c 	call	0x1922	; 0x1922 <pin_read>
    293a:	88 23       	and	r24, r24
    293c:	09 f0       	breq	.+2      	; 0x2940 <main+0x130>
    293e:	75 c0       	rjmp	.+234    	; 0x2a2a <main+0x21a>
		{
			BUTTON_2_PRESS();
    2940:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <BUTTON_2_PRESS>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	aa e7       	ldi	r26, 0x7A	; 122
    294a:	b3 e4       	ldi	r27, 0x43	; 67
    294c:	89 8f       	std	Y+25, r24	; 0x19
    294e:	9a 8f       	std	Y+26, r25	; 0x1a
    2950:	ab 8f       	std	Y+27, r26	; 0x1b
    2952:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	69 8d       	ldd	r22, Y+25	; 0x19
    2956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a e7       	ldi	r20, 0x7A	; 122
    2962:	53 e4       	ldi	r21, 0x43	; 67
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8d 8b       	std	Y+21, r24	; 0x15
    296e:	9e 8b       	std	Y+22, r25	; 0x16
    2970:	af 8b       	std	Y+23, r26	; 0x17
    2972:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2974:	6d 89       	ldd	r22, Y+21	; 0x15
    2976:	7e 89       	ldd	r23, Y+22	; 0x16
    2978:	8f 89       	ldd	r24, Y+23	; 0x17
    297a:	98 8d       	ldd	r25, Y+24	; 0x18
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <main+0x186>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <main+0x204>
	else if (__tmp > 65535)
    2996:	6d 89       	ldd	r22, Y+21	; 0x15
    2998:	7e 89       	ldd	r23, Y+22	; 0x16
    299a:	8f 89       	ldd	r24, Y+23	; 0x17
    299c:	98 8d       	ldd	r25, Y+24	; 0x18
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	69 8d       	ldd	r22, Y+25	; 0x19
    29b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9c 8b       	std	Y+20, r25	; 0x14
    29d4:	8b 8b       	std	Y+19, r24	; 0x13
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <main+0x1e6>
    29d8:	89 e1       	ldi	r24, 0x19	; 25
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9a 8b       	std	Y+18, r25	; 0x12
    29de:	89 8b       	std	Y+17, r24	; 0x11
    29e0:	89 89       	ldd	r24, Y+17	; 0x11
    29e2:	9a 89       	ldd	r25, Y+18	; 0x12
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <main+0x1d4>
    29e8:	9a 8b       	std	Y+18, r25	; 0x12
    29ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8b 89       	ldd	r24, Y+19	; 0x13
    29ee:	9c 89       	ldd	r25, Y+20	; 0x14
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <main+0x1c8>
    29fe:	1b cf       	rjmp	.-458    	; 0x2836 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6d 89       	ldd	r22, Y+21	; 0x15
    2a02:	7e 89       	ldd	r23, Y+22	; 0x16
    2a04:	8f 89       	ldd	r24, Y+23	; 0x17
    2a06:	98 8d       	ldd	r25, Y+24	; 0x18
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9c 8b       	std	Y+20, r25	; 0x14
    2a12:	8b 8b       	std	Y+19, r24	; 0x13
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	98 8b       	std	Y+16, r25	; 0x10
    2a1a:	8f 87       	std	Y+15, r24	; 0x0f
    2a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1e:	98 89       	ldd	r25, Y+16	; 0x10
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x210>
    2a24:	98 8b       	std	Y+16, r25	; 0x10
    2a26:	8f 87       	std	Y+15, r24	; 0x0f
    2a28:	06 cf       	rjmp	.-500    	; 0x2836 <main+0x26>
			_delay_ms(250);
		}
		else if (pin_read('B',2)==0)
    2a2a:	82 e4       	ldi	r24, 0x42	; 66
    2a2c:	62 e0       	ldi	r22, 0x02	; 2
    2a2e:	0e 94 91 0c 	call	0x1922	; 0x1922 <pin_read>
    2a32:	88 23       	and	r24, r24
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <main+0x228>
    2a36:	ff ce       	rjmp	.-514    	; 0x2836 <main+0x26>
		{
			BUTTON_3_PRESS();
    2a38:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <BUTTON_3_PRESS>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	aa e7       	ldi	r26, 0x7A	; 122
    2a42:	b3 e4       	ldi	r27, 0x43	; 67
    2a44:	8b 87       	std	Y+11, r24	; 0x0b
    2a46:	9c 87       	std	Y+12, r25	; 0x0c
    2a48:	ad 87       	std	Y+13, r26	; 0x0d
    2a4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	53 e4       	ldi	r21, 0x43	; 67
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8f 83       	std	Y+7, r24	; 0x07
    2a66:	98 87       	std	Y+8, r25	; 0x08
    2a68:	a9 87       	std	Y+9, r26	; 0x09
    2a6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6e:	78 85       	ldd	r23, Y+8	; 0x08
    2a70:	89 85       	ldd	r24, Y+9	; 0x09
    2a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <main+0x27e>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <main+0x2fc>
	else if (__tmp > 65535)
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	4c f5       	brge	.+82     	; 0x2af8 <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <main+0x2de>
    2ad0:	89 e1       	ldi	r24, 0x19	; 25
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	9c 81       	ldd	r25, Y+4	; 0x04
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <main+0x2cc>
    2ae0:	9c 83       	std	Y+4, r25	; 0x04
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
    2af0:	9e 81       	ldd	r25, Y+6	; 0x06
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <main+0x2c0>
    2af6:	9f ce       	rjmp	.-706    	; 0x2836 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	6f 81       	ldd	r22, Y+7	; 0x07
    2afa:	78 85       	ldd	r23, Y+8	; 0x08
    2afc:	89 85       	ldd	r24, Y+9	; 0x09
    2afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9e 83       	std	Y+6, r25	; 0x06
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
    2b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <main+0x308>
    2b1c:	9a 83       	std	Y+2, r25	; 0x02
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	8a ce       	rjmp	.-748    	; 0x2836 <main+0x26>

00002b22 <__udivmodqi4>:
    2b22:	99 1b       	sub	r25, r25
    2b24:	79 e0       	ldi	r23, 0x09	; 9
    2b26:	04 c0       	rjmp	.+8      	; 0x2b30 <__udivmodqi4_ep>

00002b28 <__udivmodqi4_loop>:
    2b28:	99 1f       	adc	r25, r25
    2b2a:	96 17       	cp	r25, r22
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <__udivmodqi4_ep>
    2b2e:	96 1b       	sub	r25, r22

00002b30 <__udivmodqi4_ep>:
    2b30:	88 1f       	adc	r24, r24
    2b32:	7a 95       	dec	r23
    2b34:	c9 f7       	brne	.-14     	; 0x2b28 <__udivmodqi4_loop>
    2b36:	80 95       	com	r24
    2b38:	08 95       	ret

00002b3a <__udivmodhi4>:
    2b3a:	aa 1b       	sub	r26, r26
    2b3c:	bb 1b       	sub	r27, r27
    2b3e:	51 e1       	ldi	r21, 0x11	; 17
    2b40:	07 c0       	rjmp	.+14     	; 0x2b50 <__udivmodhi4_ep>

00002b42 <__udivmodhi4_loop>:
    2b42:	aa 1f       	adc	r26, r26
    2b44:	bb 1f       	adc	r27, r27
    2b46:	a6 17       	cp	r26, r22
    2b48:	b7 07       	cpc	r27, r23
    2b4a:	10 f0       	brcs	.+4      	; 0x2b50 <__udivmodhi4_ep>
    2b4c:	a6 1b       	sub	r26, r22
    2b4e:	b7 0b       	sbc	r27, r23

00002b50 <__udivmodhi4_ep>:
    2b50:	88 1f       	adc	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	5a 95       	dec	r21
    2b56:	a9 f7       	brne	.-22     	; 0x2b42 <__udivmodhi4_loop>
    2b58:	80 95       	com	r24
    2b5a:	90 95       	com	r25
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	08 95       	ret

00002b62 <__prologue_saves__>:
    2b62:	2f 92       	push	r2
    2b64:	3f 92       	push	r3
    2b66:	4f 92       	push	r4
    2b68:	5f 92       	push	r5
    2b6a:	6f 92       	push	r6
    2b6c:	7f 92       	push	r7
    2b6e:	8f 92       	push	r8
    2b70:	9f 92       	push	r9
    2b72:	af 92       	push	r10
    2b74:	bf 92       	push	r11
    2b76:	cf 92       	push	r12
    2b78:	df 92       	push	r13
    2b7a:	ef 92       	push	r14
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	ca 1b       	sub	r28, r26
    2b8c:	db 0b       	sbc	r29, r27
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	09 94       	ijmp

00002b9a <__epilogue_restores__>:
    2b9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2b9c:	39 88       	ldd	r3, Y+17	; 0x11
    2b9e:	48 88       	ldd	r4, Y+16	; 0x10
    2ba0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ba6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2baa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bac:	b9 84       	ldd	r11, Y+9	; 0x09
    2bae:	c8 84       	ldd	r12, Y+8	; 0x08
    2bb0:	df 80       	ldd	r13, Y+7	; 0x07
    2bb2:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb4:	fd 80       	ldd	r15, Y+5	; 0x05
    2bb6:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb8:	1b 81       	ldd	r17, Y+3	; 0x03
    2bba:	aa 81       	ldd	r26, Y+2	; 0x02
    2bbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2bbe:	ce 0f       	add	r28, r30
    2bc0:	d1 1d       	adc	r29, r1
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	ed 01       	movw	r28, r26
    2bce:	08 95       	ret

00002bd0 <_exit>:
    2bd0:	f8 94       	cli

00002bd2 <__stop_program>:
    2bd2:	ff cf       	rjmp	.-2      	; 0x2bd2 <__stop_program>
